//jshint esversion:8
// code generated by chatgpt, fixed by wcyat
import { Client, Message } from "whatsapp-web.js";
import { Command } from "../types/command.js";
import { ObjectId } from "mongodb";
import db from "../db/index.js";
import { sendLocalized } from "../helpers/localizedMessenger.js";

interface GameState {
  board: string[][];
  currentPlayer: string;
}

interface GameDocument {
  _id?: ObjectId;
  chatId: string;
  gameState: GameState;
}

const execute = async (client: Client, msg: Message, args: string[]) => {
  const chatId = (await msg.getChat()).id._serialized;
  const command = args[0];

  if (command === "start") {
    const size = parseInt(args[1]) || 3;

    if (size < 3 || size > 10) {
      sendLocalized(client, msg, "ttt.invalid_board_size");
      return;
    }

    const gameCollection = db("ttt").coll;
    const existingGame = await gameCollection.findOne({ chatId });

    if (existingGame) {
      sendLocalized(client, msg, "ttt.game_in_progress");
      return;
    }

    const gameState = getInitialGameState(size);
    const gameDoc: GameDocument = { chatId, gameState };

    await gameCollection.insertOne(gameDoc);
    sendLocalized(client, msg, "ttt.start_success");
    await printBoard(client, msg);
    return;
  }

  if (command === "reset") {
    const gameCollection = db("ttt").coll;

    await gameCollection.deleteOne({ chatId });
    sendLocalized(client, msg, "ttt.reset_success");
    return;
  }

  const gameDoc = await getGameDoc(chatId);
  if (!gameDoc) {
    sendLocalized(client, msg, "ttt.no_game_in_progress");
    return;
  }

  const gameState = gameDoc.gameState;
  const { board, currentPlayer } = gameState;

  if (command === "play") {
    const rowIndex = parseInt(args[1]);
    const columnIndex = parseInt(args[2]);

    if (
      isNaN(rowIndex) ||
      isNaN(columnIndex) ||
      rowIndex < 0 ||
      columnIndex < 0 ||
      rowIndex >= board.length ||
      columnIndex >= board.length
    ) {
      sendLocalized(client, msg, "ttt.invalid_move_indices");
      return;
    }

    if (board[rowIndex][columnIndex] !== " ") {
      sendLocalized(client, msg, "ttt.invalid_move_occupied");
      return;
    }

    board[rowIndex][columnIndex] = currentPlayer;
    gameState.currentPlayer = currentPlayer === "X" ? "O" : "X";

    await updateGameState(chatId, gameState);
    await printBoard(client, msg);

    const winner = getWinner(board);
    if (winner) {
      sendLocalized(client, msg, "ttt.win", { winner });
      await resetGame(chatId);
      return;
    }

    if (isBoardFull(board)) {
      sendLocalized(client, msg, "ttt.draw");
      await resetGame(chatId);
      return;
    }

    return;
  }

  sendLocalized(client, msg, "ttt.invalid_command");
};

const getInitialGameState = (size: number): GameState => {
  const board: string[][] = [];

  for (let i = 0; i < size; i++) {
    const row: string[] = [];

    for (let j = 0; j < size; j++) {
      row.push(" ");
    }

    board.push(row);
  }

  return {
    board,
    currentPlayer: "X",
  };
};

const printBoard = async (client: Client, msg: Message) => {
  const chatId = (await msg.getChat()).id._serialized;
  const gameDoc = await getGameDoc(chatId);
  if (!gameDoc) {
    sendLocalized(client, msg, "ttt.no_game_in_progress");
    return;
  }

  const gameState = gameDoc.gameState;
  const board = gameState.board;

  let boardString = "";
  for (let i = 0; i < board.length; i++) {
    boardString += board[i].join(" | ") + "\\n";
    if (i < board.length - 1) {
      boardString += "--".repeat(board[i].length * 2 - 1) + "\\n";
    }
  }

  sendLocalized(client, msg, "ttt.current_game_state", { board: boardString });
};

const getGameDoc = async (chatId: string): Promise<GameDocument | null> => {
  const gameCollection = db("ttt").coll;
  return (await gameCollection.findOne({ chatId })) as GameDocument;
};

const updateGameState = async (chatId: string, gameState: GameState) => {
  const gameCollection = db("ttt").coll;
  await gameCollection.updateOne({ chatId }, { $set: { gameState } });
};

const resetGame = async (chatId: string) => {
  const gameCollection = db("ttt").coll;
  await gameCollection.deleteOne({ chatId });
};

const getWinner = (board: string[][]): string | null => {
  const size = board.length;

  // Check rows
  for (let i = 0; i < size; i++) {
    const row = board[i];
    if (row.every((cell) => cell === row[0] && cell !== " ")) {
      return row[0];
    }
  }

  // Check columns
  for (let j = 0; j < size; j++) {
    const column = board.map((row) => row[j]);
    if (column.every((cell) => cell === column[0] && cell !== " ")) {
      return column[0];
    }
  }

  // Check diagonals
  const diagonal1 = board.map((row, i) => row[i]);
  if (diagonal1.every((cell) => cell === diagonal1[0] && cell !== " ")) {
    return diagonal1[0];
  }

  const diagonal2 = board.map((row, i) => row[size - i - 1]);
  if (diagonal2.every((cell) => cell === diagonal2[0] && cell !== " ")) {
    return diagonal2[0];
  }

  return null;
};

const isBoardFull = (board: string[][]): boolean => {
  return board.every((row) => row.every((cell) => cell !== " "));
};

const command: Command = {
  name: "tictactoe",
  command: "!ttt",
  description: "Play a game of Tic-Tac-Toe!",
  commandType: "plugin",
  isDependent: false,
  help: "ttt.help",
  execute,
  public: true,
};

export default command;
